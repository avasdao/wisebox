pragma cashscript ^0.7.0;

// AnyHedge contract allows Hedge and Long to enter into an agreement where Hedge reduces their exposure
// to price volatility, measured in UNITS/BCH, and Long increases their exposure to the same volatility.
// AnyHedge also has a safety feature where Hedge and Long can exit the contract at any time through mutual agreement.
contract AnyHedge_v0_11(
    //        Mutual redemption
    //        Hedge and Long public keys. Required to verify the mutual redemption transaction signatures.
    pubkey    hedgeMutualRedeemPublicKey,   // 33 B
    pubkey    longMutualRedeemPublicKey,    // 33 B
    int       enableMutualRedemption,       // 1 B

    //        Arbitrary output lock scripts for Hedge and Long.
    //        AnyHedge can payout to p2pkh, p2sh or any valid output.
    //        E.g. p2pkh: pushLockScript + (opDup + opHash160 + pushHash + longPKH + opEqualVerify + opCheckSig)
    //        E.g. p2sh: pushLockScript + (opHash160 + pushHash + hedgeScriptHash + opEqual)
    //        An invalid lock script will make the contract un-redeemable so both must be validated carefully.
    bytes     hedgeLockScript,              // 26 B for p2pkh, depends on script type
    bytes     longLockScript,               // 26 B for p2pkh, depends on script type

    //        Oracle
    pubkey    oraclePublicKey,              // 33 B, verifies message from oracle

    //        Money
    //        Note: All int types below must be minimally encoded.
    int       nominalUnitsXSatsPerBch,      // 1~8 B, hedge payout in Units, scaled by 1e8(sats/BCH)
    int       payoutSats,                   // 1~8 B, total payout sats, miner fee not included
    int       lowLiquidationPrice,          // 1~4 B, clamps price data to ensure valid payouts
    int       highLiquidationPrice,         // 1~4 B, clamps price data to ensure valid payouts

    //        Time
    int       startTimestamp,               // 4 B, earliest redemption timestamp under liquidation conditions
    int       maturityTimestamp,            // 4 B, required redemption timestamp under maturity conditions
) {

    // Mutual redemption is a safety feature where Hedge and Long can agree to exit the contract at any time.
    // It can be useful for example in the case of a funding error.
    // Note: This controls all contract inputs, such as fees, even if Hedge and Long did not provide them.
    function mutualRedeem(
        //    Hedge and Long signatures of the mutual redemption transaction.
        sig   hedgeMutualRedeemSignature,   // 65 B
        sig   longMutualRedeemSignature     // 65 B
    ) {
        // Check that mutual redemption is enabled
        require(bool(enableMutualRedemption));

        // Verify that both Hedge and Long agree to the details of this transaction.
        require(checkSig(hedgeMutualRedeemSignature, hedgeMutualRedeemPublicKey));
        require(checkSig(longMutualRedeemSignature, longMutualRedeemPublicKey));
    }

    // Payout in Liquidation or Maturity conditions
    function payout(
        // Oracle Data
        // {
        //     bytes4 messageTimestamp;
        //     bytes4 messageSequence;
        //     bytes4 contentSequence;
        //     bytes4 contentData / price;
        // }
        bytes   settlementMessage,     // 16 B, current oracle message
        datasig settlementSignature,   // 64 B, signature of oracle message, verified with oracle's pubkey
        bytes   previousMessage,       // 16 B, previous oracle message
        datasig previousSignature,     // 64 B, signature of previous oracle message, verified with oracle's pubkey
    ) {
        // Check that only a single input is used in this transaction
        require(tx.inputs.length == 1);

        // Payout must happen through Liquidation or Maturity.
        // In both cases, we need to authenticate the current and previous oracle message.
        require(checkDataSig(previousSignature, previousMessage, oraclePublicKey));
        require(checkDataSig(settlementSignature, settlementMessage, oraclePublicKey));

        // Extract previous message's content sequence.
        int previousSequence = int(previousMessage.split(8)[1].split(4)[0]);

        // If the "content sequence" is negative it represents metadata rather than a price message
        // and cannot be used inside the contract.
        require(previousSequence > 0);

        // Extract settlement message's content sequence.
        int settlementSequence = int(settlementMessage.split(8)[1].split(4)[0]);

        // Assert that the two messages connect without gaps.
        require(settlementSequence - 1 == previousSequence);

        // Extract the previous message's timestamp.
        int previousTimestamp = int(previousMessage.split(4)[0]);

        // Assert that the previous observation happened *before* the maturity time.
        // This means that *if* the current message is on/after maturity, it is the first.
        require(previousTimestamp < maturityTimestamp);

        // Extract the settlement message's price.
        int oraclePrice = int(settlementMessage.split(12)[1]);

        // Fail if the oracle price is out of specification. Specifically:
        // 1. Fail if the price is negative.
        // 2. Fail if the price is zero.
        require(oraclePrice > 0);

        // Clamp the price within the allowed price range so that redemption will always be accurate and valid.
        int clampedPrice = max(min(oraclePrice, highLiquidationPrice), lowLiquidationPrice);

        // Validate oracle timing and price.
        //
        // This is a visualization of the oracle timing.
        // L: Earliest Liquidation timestamp
        // M: Maturity timestamp
        //             L          M
        //   <---------|----------|--------->
        // A <---------○                      (Redemption should fail)
        // B           ●----------○           (Liquidation is allowed only if oracle price is out of bounds)
        // C                      ●           (Maturity is allowed only for first price message on/after timestamp M)
        // D                      ○---------> (Redemption should fail)
        //

        // Extract the settlement message's timestamp.
        int settlementTimestamp = int(settlementMessage.split(4)[0]);

        // Fail if the oracle timestamp is before the earliest liquidation time
        require(settlementTimestamp >= startTimestamp);

        // At this point we already know that the previous message was before maturity and that the current
        // message is after the earliest liquidation time. So to be valid this message needs to be either:
        // 1. A maturation, in which case the message must be on or after maturity time.
        // 2. A liquidation, in which case the price must be out of liquidation bounds.
        bool onOrAfterMaturity = settlementTimestamp >= maturityTimestamp;
        bool priceOutOfBounds = !within(clampedPrice, lowLiquidationPrice + 1, highLiquidationPrice);
        require(onOrAfterMaturity || priceOutOfBounds);

        // We survived the oracle validation gauntlet so redeem the contract with the clamped price.

        // Calculate payout sats, including dust safety
        int DUST = 546;
        int hedgeSats = max(DUST, nominalUnitsXSatsPerBch / clampedPrice);
        int longSats = max(DUST, payoutSats - hedgeSats);

        // Check that the hedge output + long output match this transaction's outputs
        require(tx.outputs.length == 2);
        require(tx.outputs[0].value == hedgeSats);
        require(tx.outputs[0].lockingBytecode == hedgeLockScript);
        require(tx.outputs[1].value == longSats);
        require(tx.outputs[1].lockingBytecode == longLockScript);
    }
}
