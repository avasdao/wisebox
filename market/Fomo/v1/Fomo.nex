pragma nexscript >= 0.2.0;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * Copyright (c) 2024 Ava's DAO
 * Released under the MIT License.
 *
 * Fomo (Fear of missing out) â€” is an auction contract designed to allow
 * those with "paper hands" to buy in early and those with "diamond hands"
 * to hold-out for better opportunities.
 *
 * Most notably, once a Circus has begun, it CANNOT be stopped.
 *
 * NOTES
 * --------------------
 * Half the value of the asset is "shared" back to the community of
 * active participants via an "incentivized game" of King of the Hill.
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * Version     : 01
 * Script Hash : 0x0000000000000000000000000000000000000000
 * Namespace   : FOMO01
 *
 * fearless : Party whom will receive the payouts.
 * hysteria : A very useful parameter.
 * inciter : A very useful parameter.
 * admin : A very useful parameter.
 * fearFactor : A very useful parameter.
 * curfew : A very useful parameter.
 *
 * For more information, please visit the following resources:
 *   - https://docs.causes.cash/fomo
 *   - https://avasdao.org
 *
 */
contract Fomo(
    bytes20 visible fearless,
    bytes20 visible inciter,
    bytes20 visible admin,
    int visible adminFee,
    int visible fearFactor,
    int visible curfew,
) {
    /**
     * Capture
     *
     * Allows a participant to stake a claim to the locked asset
     * currently in the Fomo Arena.
     *
     * @param owner
     * @param signature
     */
    function capture(bytes20 newFearless) {
        /* Initialize dust value. */
        int DUST_VALUE = 546;

        /* Initialize basis points (scaling factor). */
        int BASIS_POINTS = 10000;

        /* Initialize Admin fee. */
        // NOTE: This is hard-coded to save space due to Rostrum bug.
        // NOTE: 300 is equal to 3.00%.
        // int ADMIN_FEE = 300;

        /* Initialize minimum patience. */
        int MIN_PATIENCE = 1;

        /* Set previous (satoshis) hysteria. */
        // int prevHysteria = tx.inputs[0].value;
        int prevHysteria = tx.inputs[fomoIdx].value * 2;

        /* Set new (satoshis) hysteria. */
        // NOTE: Aggregate of Inciter "hysteria" value retained in Fomo and
        //       the (previous) Fearless output.
        int newHysteria = tx.outputs[0].value + tx.outputs[1].value;

        /* Validate new hysteria is greater (by at least DUST). */
        require(newHysteria > prevHysteria);


        /* Parse Fomo unlockcing script. */
        // bytes iLocking = tx.inputs[0].lockingBytecode;

        // int hysteriaLen = this.activeBytecode
        //     .split(33)[0] // NOTE: Parse the `fearless` pubkeyhash
        //     .split(1)[0]; // NOTE: Remove the length (prefix).

        /* Calculate position of "visible" locking parameters. */
        // int lockingpParamsPos = 34 + hysteriaLen;

        /* Parse Fomo locking script. */
        bytes oLocking = bytes(newFearless.length) + newFearless +
            this.activeBytecode.split(33)[1];

        /* Verify Fomo locks are preserved. */
        require(tx.outputs[0].lockingBytecode == oLocking);

        /* Verify number of outputs. */
        // NOTE: We ONLY expect the asset (plus optional change).
        // require(tx.outputs.length <= 5);




        /* Calculate Fomo transaction value (based on satoshis). */
        // NOTE: Used to calculate Admin & Inciter fees.
        int addedHysteria = (newHysteria - prevHysteria);

        /* Set maximum bid. */
        // NOTE: We limit the maximum bid per round to encourage
        //       a more enjoyable "fair play" experience.
        int maxHysteria = (prevHysteria * 3);

        /* Validate added hysteria. */
        // NOTE: Maximum hysteria is "inclusive".
        require(within(addedHysteria, prevHysteria, (maxHysteria + 1)));

        /* Initialize patience. */
        // NOTE: Number of `blocks` required to wait before Bid acceptance
        //       at the respective level of `hysteria`.
        int patience = 0;

        /* Handle added fear. */
        if (addedHysteria == maxHysteria) {
            /* Verify UTXO age is AFTER the last capture time. */
            // NOTE: We require at least one (1) block to encourage
            //        "fair play" amongst participants.
            patience = 1;
        } else {
            int fearMultiplier = ((addedHysteria * BASIS_POINTS) / maxHysteria);

            /* Validate added hysteria. */
            // NOTE: Minimum is ~1hr, and maximum is ~1day.
            require(within(fearFactor, 30, 720));

            /* Calculate fear factor (basis points). */
            int ffBP = fearFactor * BASIS_POINTS;

            /* Calculate patience. */
            patience = (ffBP * fearMultiplier) / BASIS_POINTS;
        }

        /* Set minimum patience. */
        patience = max(patience, MIN_PATIENCE);

        /* Verify minimum patience. */
        // NOTE: UTXO age MUST be AFTER the last capture time.
        require(tx.age >= patience);

        /* Verify Fomo (commission) bytecode. */
        require(tx.outputs[0].value == newHysteria);

        //----------------------------------------------------------------------
        // BEGIN LOCKING BYTECODE VERIFICATION (WORKAROUND) FOR GROUPS
        //----------------------------------------------------------------------

        /* Set Fomo index. */
        int fomoIdx = this.activeInputIndex;

        /* Parse output (script) prefix, plus 1st holder. */
        bytes oPrefix, bytes oHolder = tx.outputs[fomoIdx]
            .lockingBytecode
            .split(33);

        /* Parse output `tokenAmount` size, plus 2nd holder. */
        bytes1 oSize, bytes oHolderToo = oHolder.split(1);

        /* Parse output (script) suffix. */
        // NOTE: Drop the `tokenAmount` value.
        bytes oSuffix = oHolderToo.split(int(oSize))[1];

        /* Parse input (script) prefix, plus 1st holder. */
        bytes iPrefix, bytes iHolder = tx.inputs[fomoIdx]
            .lockingBytecode
            .split(33);

        /* Parse input `tokenAmount` size, plus 2nd holder. */
        bytes1 iSize, bytes iHolderToo = iHolder.split(1);

        /* Parse input (script) suffix. */
        // NOTE: Drop the `tokenAmount` value.
        bytes iSuffix = iHolderToo.split(int(iSize))[1];

        /* Validate input/output prefix scripts. */
        require(oPrefix == iPrefix);

        /* Validate input/output suffix scripts. */
        require(oSuffix == iSuffix);

        //----------------------------------------------------------------------
        // END LOCKING BYTECODE VERIFICATION (WORKAROUND) FOR GROUPS
        //----------------------------------------------------------------------

        //----------------------------------------------------------------------
        // BEGIN COMMISSION HANDLING
        //----------------------------------------------------------------------

        /* Set Admin bytecode. */
        // NOTE: Supports ONLY $NEXA assets.
        bytes23 adminBytecode = new LockingBytecodeP2PKT(admin);

        /* Verify Admin (commission) bytecode. */
        require(tx.outputs[2].lockingBytecode == adminBytecode);

        /* Calculate Admin commission. */
        int adminCommission = (addedHysteria * adminFee) / BASIS_POINTS;

        /* Validate Admin commission (dust) value. */
        // adminCommission = max(adminCommission, baseServiceFee);
        adminCommission = max(adminCommission, DUST_VALUE);

        /* Verify Admin (commission) amount. */
        require(tx.outputs[2].value >= adminCommission);

        //----------------------------------------------------------------------
        // END COMMISSIONS HANDLING
        //----------------------------------------------------------------------
    }

    /**
     * Liberate
     *
     * Transfers the asset safely out of the Fomo Arena to the current
     * Fearless address.
     *
     * NOTE: There is a 10,000 satoshi incentive/reward for ANYONE
     *       who executes this method on behalf of the Fearless.
     */
    function liberate() {
        /* Initialize dust value. */
        int DUST_VALUE = 546;

        /* Set Wisegal (incentived) fee. */
        // NOTE: We also use this for `BASIS_POINTS`.
        int WISEGAL_FEE = 10000;

        /* Initialize Admin fee. */
        // NOTE: This is hard-coded to save space due to Rostrum bug.
        // NOTE: 300 is equal to 3.00%.
        // int ADMIN_FEE = 300;

        /* Set Fomo index. */
        int fomoIdx = this.activeInputIndex;

        /* Verify curfew (i.e. contract expiration) has passed. */
        require(tx.time >= curfew);

        /* Set Admin bytecode. */
        // NOTE: Supports ONLY $NEXA assets.
        bytes23 fearlessBytecode = new LockingBytecodeP2PKT(fearless);

        /* Verify Fearless bytecode. */
        require(tx.outputs[0].lockingBytecode == fearlessBytecode);

        /* Verify the (sub-group) token output. */
        require(tx.outputs[0]
            .tokenSubgroupId == tx.inputs[fomoIdx]
                .tokenSubgroupId
        );

        /* Calculate Inciter commission. */
        // NOTE: A fee is reserved for "automated" service providers.
        //       (see https://wisegals.org for more details)
        int inciterPayout = tx.inputs[fomoIdx].value - WISEGAL_FEE;

        /* Validate Inciter commission (dust) value. */
        inciterPayout = max(inciterPayout, DUST_VALUE);

        /* Set Inciter (payout) bytecode. */
        // NOTE: Supports ONLY $NEXA assets.
        bytes23 inciterBytecode = new LockingBytecodeP2PKT(inciter);

        /* Verify Inciter (payout) bytecode. */
        require(tx.outputs[1].lockingBytecode == inciterBytecode);

        /* Verify Inciter (payout) amount. */
        require(tx.outputs[1].value >= inciterPayout);


        //----------------------------------------------------------------------
        // BEGIN COMMISSION HANDLING
        //----------------------------------------------------------------------

        /* Set Admin bytecode. */
        // NOTE: Supports ONLY $NEXA assets.
        bytes23 adminBytecode = new LockingBytecodeP2PKT(admin);

        /* Verify Admin (commission) bytecode. */
        require(tx.outputs[2].lockingBytecode == adminBytecode);

        /* Calculate Admin commission. */
        // NOTE: `WISEGAL_FEE` is used to replace `BASIS_POINTS`.
        int adminCommission = (inciterPayout * adminFee) / WISEGAL_FEE;

        /* Validate Admin commission (dust) value. */
        // adminCommission = max(adminCommission, baseServiceFee);
        adminCommission = max(adminCommission, DUST_VALUE);

        /* Verify Admin (commission) amount. */
        require(tx.outputs[2].value >= adminCommission);

        //----------------------------------------------------------------------
        // END COMMISSIONS HANDLING
        //----------------------------------------------------------------------


        // NOTE: There is NO requirement to verify "change" output(s), as:
        //         1. the Fomo Asset is restricted to the 1st output.
        //         2. the Fomo Coins are restricted to the 2nd output.
        //            (minus the Wisegal (hard-coded) fee)
    }
}
