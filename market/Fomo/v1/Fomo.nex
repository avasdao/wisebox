pragma nexscript >= 0.2.0;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * Copyright (c) 2024 Ava's DAO
 * Released under the MIT License.
 *
 * Fomo (Fear of missing out) â€” is an auction contract designed to allow
 * those with "paper hands" to buy in early and those with "diamond hands"
 * to hold-out for better opportunities.
 *
 * Most notably, once a Circus has begun, it CANNOT be stopped.
 *
 * NOTES
 * --------------------
 * TBD
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * Version     : 01
 * Script Hash : 0x0000000000000000000000000000000000000000
 * Namespace   : FOMO01
 *
 * fearless : Party whom will receive the payouts.
 * hysteria : A very useful parameter.
 * inciter : A very useful parameter.
 * admin : A very useful parameter.
 * fearFactor : A very useful parameter.
 * curfew : A very useful parameter.
 *
 * For more information, please visit the following resources:
 *   - https://docs.causes.cash/fomo
 *   - https://avasdao.org
 *
 */
contract Fomo(
    bytes20 fearless,
    bytes8 hysteria,
    bytes20 inciter,
    bytes20 admin,
    int fearFactor,
    int curfew,
) {
    /**
     * Capture
     *
     * Allows a participant to stake a claim to the locked asset
     * currently in the Fomo Arena.
     *
     * @param owner
     * @param signature
     */
    function capture(bytes20 newFearless) {
        /* Initialize dust value. */
        int DUST_VALUE = 546;

        /* Initialize basis points (scaling factor). */
        int BASIS_POINTS = 10000;

        /* Initialize Admin fee. */
        // NOTE: This is hard-coded to save space due to Rostrum bug.
        // NOTE: 300 is equal to 3.00%.
        int ADMIN_FEE = 300;

        /* Initialize minimum patience. */
        int MIN_PATIENCE = 1;

        /* Set previous (satoshis) hysteria. */
        // int prevHysteria = tx.inputs[0].value;
        int prevHysteria = int(hysteria);

        /* Set new (satoshis) hysteria. */
        // NOTE: Aggregate of previous Fearless and Inciter outputs.
        int newHysteria = tx.outputs[1].value + tx.outputs[2].value;

        /* Validate new hysteria is greater (by at least DUST). */
        require(newHysteria > prevHysteria);


        /* Parse Fomo unlockcing script. */
        bytes iLocking = tx.inputs[0].lockingBytecode;

        int hysteriaLen = this.activeBytecode
            .split(33)[0] // NOTE: Parse the `fearless` pubkeyhash
            .split(1)[0]; // NOTE: Remove the length (prefix).

        /* Calculate position of "visible" locking parameters. */
        int lockingpParamsPos = 34 + hysteriaLen;

        /* Parse Fomo locking script. */
        bytes oLocking = bytes(newFearless.length) + newFearless +
            bytes(bytes(newHysteria).length) + bytes(newHysteria) +
            this.activeBytecode.split(lockingpParamsPos)[1];


        /* Verify Fomo locks are preserved. */
        require(tx.outputs[0].lockingBytecode = oLocking);

        /* Verify number of outputs. */
        // NOTE: We ONLY expect the asset (plus optional change).
        // require(tx.outputs.length <= 5);




        /* Calculate Fomo transaction value (based on satoshis). */
        // NOTE: Used to calculate Admin & Inciter fees.
        int addedHysteria = (newHysteria - prevHysteria);

        /* Set maximum bid. */
        // NOTE: We limit the maximum bid per round to encourage
        //       a more enjoyable "fair play" experience.
        int maxHysteria = (prevHysteria * 3);

        /* Validate added hysteria. */
        // NOTE: Maximum hysteria is "inclusive".
        require(within(addedHysteria, prevHysteria, maxHysteria + 1));

        /* Initialize patience. */
        // NOTE: Number of `blocks` required to wait before Bid acceptance
        //       at the respective level of `hysteria`.
        int patience = 0;

        /* Handle added fear. */
        if (addedHysteria == maxHysteria) {
            /* Verify UTXO age is AFTER the last capture time. */
            // NOTE: We require at least one (1) block to encourage
            //        "fair play" amongst participants.
            patience = 1;
        } else {
            int fearMultiplier = ((addedHysteria * 10000) / maxHysteria);

            int ffBP = fearFactor * 10000;

            patience = (ffBP * fearMultiplier) / 10000;
        }

        /* Set minimum patience. */
        patience = max(patience, MIN_PATIENCE);

        /* Verify minimum patience. */
        // NOTE: UTXO age MUST be AFTER the last capture time.
        require(tx.age >= patience);

        //----------------------------------------------------------------------
        // BEGIN COMMISSIONS HANDLING
        //----------------------------------------------------------------------

        /* Set Inciter (payout) bytecode. */
        // NOTE: Supports ONLY $NEXA assets.
        bytes23 inciterBytecode = new LockingBytecodeP2PKT(inciter);

        /* Verify Inciter (payout) bytecode. */
        require(tx.outputs[1].lockingBytecode == inciterBytecode);

        /* Validate Inciter commission (dust) value. */
        int inciterCommission = max(addedHysteria, DUST_VALUE);

        /* Verify Inciter (payout) amount. */
        require(tx.outputs[1].value >= inciterCommission);

        /* Set Admin bytecode. */
        // NOTE: Supports ONLY $NEXA assets.
        bytes23 adminBytecode = new LockingBytecodeP2PKT(admin);

        /* Verify Admin (commission) bytecode. */
        require(tx.outputs[2].lockingBytecode == adminBytecode);

        /* Calculate Admin commission. */
        int adminCommission = (addedHysteria * ADMIN_FEE) / BASIS_POINTS;

        /* Validate Admin commission (dust) value. */
        // adminCommission = max(adminCommission, baseServiceFee);
        adminCommission = max(adminCommission, DUST_VALUE);

        /* Verify Admin (commission) amount. */
        require(tx.outputs[2].value >= adminCommission);

        //----------------------------------------------------------------------
        // END COMMISSIONS HANDLING
        //----------------------------------------------------------------------



        /* Set Admin bytecode. */
        // NOTE: Supports ONLY $NEXA assets.
        // bytes23 adminBytecode = new LockingBytecodeP2PKT(admin);

        /* Verify Admin (commission) bytecode. */
        // require(tx.outputs[adminOutputIdx].lockingBytecode == adminBytecode);

        /* Verify Admin (commission) amount. */
        // require(tx.outputs[adminOutputIdx].value >= adminCommission);
    }

    /**
     * Liberate
     *
     * Transfers the asset safely out of the Fomo Arena to the current
     * Fearless address.
     *
     * NOTE: There is a 10,000 satoshi incentive/reward for ANYONE
     *       who executes this method on behalf of the Fearless.
     */
    function liberate() {
        /* Verify curfew (i.e. contract expiration) has passed. */
        require(tx.time >= curfew);

        /* Verify number of outputs. */
        // NOTE: We ONLY expect the asset (plus optional change).
        require(tx.outputs.length <= 2);

        /* Set Admin bytecode. */
        // NOTE: Supports ONLY $NEXA assets.
        bytes23 fearlessBytecode = new LockingBytecodeP2PKT(fearless);

        /* Verify Fearless bytecode. */
        require(tx.outputs[0].lockingBytecode == fearlessBytecode);

        /* Verify a (group) token output. */
        require(tx.outputs[0].tokenGroupId != 0x);

        /* Verify (optional) change output. */
        if (tx.outputs.length == 2) {
            /* Verify a (NEXA) coin output. */
            require(tx.outputs[1].tokenGroupId == 0x);
        }
    }
}
