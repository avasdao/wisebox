pragma nexscript >= 0.2.0;

/*******************************************************************************
 *
 * Copyright (c) 2024 Ava's DAO
 * Released under the MIT License.
 *
 * Genesis PoW (Proof-of-Work)
 *
 * A proof-of-work (PoW) mining "wise" contract.
 *
 * NOTES
 * --------------------
 * Based on the MistCoin Simple Ledger Protocol (SLP) mining contract
 * introduced on the Bitcoin Cash (BCH) in 2020.
 * (see https://mazetoken.github.io/mminer/Mistcoin-archive/Mistcoin.html)
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * Version     : 01
 * Script Hash : 0x0000000000000000000000000000000000000000
 * Namespace   : GENPOW01
 *
 * owner : Party whom will receive the payouts.
 * param : A very useful parameter.
 *
 * For more information, please visit the following resources:
 *   - https://domain.tld
 *   - https://avasdao.org
 *
 * @param owner
 * @param key
 * @param value
 *
 */
contract Genesis(
    int visible epoch,
    int visible speed,
    int visible rewards,
    bytes20 visible algo,
    bytes20 visible admin,
    bytes20 visible treasury,
    int visible maintenance,
) {
    /**
     * Mint
     *
     * Mint a NEW proof-of-work token, based on the rewards schedule.
     *
     * @param owner
     * @param signature
     */
    function mint() {
        /* Set dust value. */
        int DUST_VALUE = 546;

        /* Verify parameter. */
        require(param >= DUST_VALUE);

        if (maintenance > 0) {
            // TODO
        }
    }

    /**
     * Move to Next (Block)
     *
     * Iterates the mining engine after each Nexa block.
     *
     * @param owner
     * @param signature
     */
    function moveNext() {
        /* Set dust value. */
        int DUST_VALUE = 546;

        /* Verify parameter. */
        require(param >= DUST_VALUE);

        /* Verify transaction is signed by the owner. */
        require(checkSig(signature, owner));
    }

    /**
     * Manage
     *
     * Perform administrative functions:
     *   - update maintenance fee
     *
     * @param owner
     * @param signature
     */
    function manage(
        int speed,
        int rewards,
        bytes20 algo,
        bytes20 admin,
        bytes20 treasury,
        int maintenance,
    ) {
        /* Set authorized sub-group id. */
        bytes authorized = tx.inputs[1].tokenSubgroupId;

        require(hash160(authorized) == admin);
    }
}
