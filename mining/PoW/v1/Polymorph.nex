pragma nexscript >= 0.2.0;

/*******************************************************************************
 *
 * Copyright (c) 2024 Ava's DAO
 * Released under the MIT License.
 *
 * Polymorph PoW (Proof-of-Work)
 *
 * A mutable proof-of-work (PoW) mining "wise" contract; specially designed for
 * hybrid operation in either self-running OR hosted mode, or a combination
 * of the two.
 *
 * NOTES
 * --------------------
 * The hybrid model offers the option of CPU & GPU modes of operation. Or
 * a alternating-mode which can switch back-and-forth.
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * Version     : 01
 * Script Hash : 0x0000000000000000000000000000000000000000
 * Namespace   : POLYPOW01
 *
 * epoch : Number of total blocks mined.
 * speed : Number of blocks mined in the last 24 hours (avg is 360 or 1/2 of Nexa).
 * rewards : Amount of rewards distributed per block.
 * algo  : A (dynamic) algorithm designed to ONLY be revealed AFTER submission. (MUST use a nonce when repeating algos)
 * admin : The asset Administrator.
 * treasury : Destination for all fees, set by the Administrator.
 * maintenance : Asset maintenance fee, set by the Administrator.
 *
 * For more information, please visit the following resources:
 *   - https://nxy.cash
 *   - https://avasdao.org
 *
 * @param epoch
 * @param speed
 * @param rewards
 * @param algo
 * @param admin
 * @param treasury
 * @param maintenance
 *
 */
contract Polymorph(
    int visible epoch,
    int visible speed,
    int visible rewards,
    bytes20 visible algo,
    bytes20 visible admin,
    bytes20 visible treasury,
    int visible maintenance,
) {
    /**
     * Mint
     *
     * Mint a NEW proof-of-work token, based on the rewards schedule.
     *
     * @param solution
     * @param miner
     */
    function mint(bytes solution, bytes20 miner) {
        /* Set mining rewards value. */
        // NOTE: This is hard-coded and CANNOT be changed EVER!!
        int MINING_REWARDS = 123;

        /* Set dust value. */
        int DUST_VALUE = 546;

        /* Verify parameter. */
        require(param >= DUST_VALUE);

        if (maintenance > 0) {
            // TODO
        }
    }

    /**
     * Set (CPU) Algorithm
     *
     * NOTE: This will be executed after EVERY (GPU) block reward,
     *       when operating in "hybrid-hosted" mode.
     *
     * @param algo
     */
    function setAlgo(bytes20 algo) {
        /* Set authorized sub-group id. */
        bytes authorized = tx.inputs[1].tokenSubgroupId;

        require(hash160(authorized) == admin);
    }

    /**
     * (Emergency) Override
     *
     * @param speed
     * @param rewards
     */
    function override(
        int speed,
        int rewards,
    ) {
        /* Set authorized sub-group id. */
        bytes authorized = tx.inputs[1].tokenSubgroupId;

        require(hash160(authorized) == admin);
    }

    /**
     * Update Management (Authority)
     *
     * @param admin
     * @param treasury
     * @param maintenance
     */
    function manage(
        bytes20 admin,
        bytes20 treasury,
        int maintenance,
    ) {
        /* Set authorized sub-group id. */
        bytes authorized = tx.inputs[1].tokenSubgroupId;

        require(hash160(authorized) == admin);
    }
}
