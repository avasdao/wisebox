pragma nexscript >= 0.2.0;

/*******************************************************************************
 * Copyright (c) 2024 Ava's DAO
 * Released under the MIT License.
 *
 * Polymorph PoW (Proof-of-Work)
 *
 * A mutable proof-of-work (PoW) mining "wise" contract; specially designed for
 * hybrid operation in either self-running OR hosted mode, or a combination
 * of the two.
 *
 * NOTES
 * --------------------
 * The hybrid model offers the option of CPU & GPU modes of operation.
 * Or an alternating-mode which can switch back-and-forth.
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * Version     : 01
 * Script Hash : 0x90D3B53F09E8430BD4D519243071090D6CB60F96
 * Namespace   : POLYPOW01
 *
 * For more information, please visit the following resources:
 *   - https://nxy.cash/whitepaper
 *   - https://avasdao.org
 *
 */
contract Polymorph() {
    /**
     * Mint
     *
     * Mint a NEW proof-of-work token, based on the rewards schedule.
     *
     * An (optional) access key can be used to offer additional protections
     * against malicious use and/or abuse of the Script template.
     *
     * NOTE: `access` (key) should be a random (up to 160-bit) value.
     *
     * NOTE: `miner` allows mining pools to operate w/out the concern
     *       that miners will be selfish with their solution candidates.
     *
     * @param accessKey A miner-submitted access key. (Used to prevent abuse)
     * @param miner     Performing proof-of-work calculations.
     * @param candidate A nonce that satisfies the current challenge.
     */
    function mint(
        bytes20 accessKey,
        bytes20 miner,
        bytes32 candidate,
    ) {
        /**
         * Initial Mining Rewards
         *
         * (measured in asset's atomic unit)
         *
         * Set initial mining rewards value.
         *
         * NOTE: This is hard-coded and CANNOT be changed EVER!!
         */
        int INITIAL_MINING_REWARDS = 5000000000;

        /**
         * Season Length
         *
         * (measured in blocks)
         *
         * Mining rewards will be adjusted at this interval.
         *
         * (2 minute blocks) x (24 hours) = 720 blocks
         *                   x (90 days)  = 64,800 blocks
         *                                = 1 season
         *
         * NOTE: Variance exists in relation to Nexa block generation.
         * NOTE: This is hard-coded and CANNOT be changed EVER!!
         */
        int SEASON_LENGTH = 64800;

        /* Set basis points (scaling factor). */
        // int BASIS_POINTS = 10000;

        // FIXME: FOR DEVELOPMENT PURPOSES ONLY
        bool IS_PUBLIC = true;

        // FIXME: FOR DEVELOPMENT PURPOSES ONLY
        int EPOCH = 1337;

        // NOTE: Hash used to verify the access key.
        bytes20 GUARDIAN = 0x8C26E10AA399C5E2D4FF7C449C7279A5B5708F0F; // Merhaba Satoshi!

        // NOTE: Maximum target value for submission.
        int MAX_TARGET = int(0xFFFFFFFFFFFFFF00); // NOTE: PADDING IS REQUIRED!!

        // NOTE: Minimum target value for submission.
        int MIN_TARGET = int(0xFFFF00); // NOTE: PADDING IS REQUIRED!!

        // NOTE: Used to add additional "difficulty" to the Public mining reward. (expected to a factor of GPU vs CPU)
        int HANDICAP = 8;

        /**
         * Restrict Outputs
         *
         * Only allow the following outputs:
         *   1. contract
         *   2. treasury tribute
         *   3. miner reward
         *   4. (optional) change
         */
        int MAXIMUM_OUTPUTS = 4;

        /* Set token group id. */
        bytes32 tokenGroupId = bytes32(
            tx.inputs[this.activeInputIndex].tokenGroupId);

        //----------------------------------------------------------------------
        // BEGIN CONTRACT SECURITY & PRESERVATION VERIFICATION
        //----------------------------------------------------------------------

        /* Verify contract lock remains unchanged. */
        // NOTE: Parameter updates are "managed" by the Manager.
        //       (see the Manager contract below)
        // NOTE: Only the Manager can set the contract to Output #0
        require(
            tx.outputs[this.activeInputIndex]
                .lockingBytecode == tx.inputs[this.activeInputIndex]
                    .lockingBytecode
        );

        // NOTE: Token (mint authority) value is preserved
        //       in the locking script.

        /* Verify (maximum) outputs. */
        require(tx.outputs.length <= MAXIMUM_OUTPUTS);

        /* Verify (coin) change. */
        if (tx.outputs.length == MAXIMUM_OUTPUTS) {
            require(int(tx.outputs[3].tokenGroupId) == 0);
        }

        //----------------------------------------------------------------------
        // END CONTRACT SECURITY & PRESERVATION VERIFICATION
        //----------------------------------------------------------------------

        //----------------------------------------------------------------------
        // BEGIN MINING CHALLENGE VERIFICATION
        //----------------------------------------------------------------------

        /* Verify Guardian access key. */
        // NOTE: See the Wisebox Docs for more information about
        //       the use of Guardians.
        require(hash160(accessKey) == GUARDIAN);

        /* Set entropy from the previous transaction hash. */
        bytes32 entropy = tx.inputs[this.activeInputIndex]
            .outpointTransactionHash;

        /**
         * Hashing Challenge
         *
         * Miner-submitted (solution) candidate is inserted into
         * the dynamically provided (Enclave-attested) hashing script.
         *
         * Three (3) parameters are concatenated together to evaluate
         * a potential block reward candidate:
         *   1. (Primary) miner script hash
         *   2. Entropy (from previous tx hash)
         *   3. Miner (solution) candidate
         *   (i.e. scriptHash + entropy + candidate)
         *
         * The Polymorph Hashing Engine utilizes five (5) hashing algorithms
         * when generating random challenges:
         *   ✔ SHA-1
         *   ✔ RIPEMD-160
         *   ✔ SHA-256
         *   ✔ SHA-256(RIPEMD-160)
         *   ✔ SHA-256(SHA-256)
         *
         * NOTE: Do to the current Op code limit and Script size,
         *       there is a maximum of ten (10) random hashes allowed.
         *
         * NOTE: RIPEMD-160 will always used as the final hash.
         *       (to maintain stable & consistent difficulty calculations??)
         */
        bytes20 solution = (
            hash160(
                // ripemd160( // NOTE: duplicated
                    // hash256(
                        // hash160(
                            // sha256(
                                // ripemd160(
                                    sha1(miner + entropy + candidate)
                                    // sha1(entropy + candidate)
                                // )
                            // )
                        // )
                    // )
                // )
            )
        );

// candidate = candidate;
// miner = miner;

        /* Generate a submission that meets the difficulty requirement. */
        // NOTE: Take the 1st 7 bytes (56-bits) and use the built-in
        //       arithmetic functions.
        int submission = int(solution.split(7)[0] + 0x00); // NOTE: PADDING IS REQUIRED!!

        /* Verify public rewards round. */
        // NOTE: Only the Manager can set the contract to Output #0
        if (IS_PUBLIC) {
            /* Verify UTXO age is AT LEAST ONE BLOCK. */
            // NOTE: Prevents a denial-of-service (DoS) hash attack by FPGAs or ASICs.
            // NOTE: Private rewards are availalbe IMMEDIATELY after an Admin round reset.
            require(tx.age >= 1);

            /**
             * Public Target
             *
             * Re-calculate the target for desktop/GPU miners.
             *
             * NOTE: A 256-bit solution has a maximum of (32) bytes.
             *
             * NOTE: There is a (hard-coded) minimum target of
             *       0xFF (i.e. 18 zeros).
             */
            int publicTarget = max((MAX_TARGET / HANDICAP), MIN_TARGET);

            /* Verify the FINAL submission. */
            require(submission <= publicTarget);
        } else {
            /* Verify the FINAL submission. */
            require(submission <= MAX_TARGET);
        }

        //----------------------------------------------------------------------
        // END MINING CHALLENGE VERIFICATION
        //----------------------------------------------------------------------

        //----------------------------------------------------------------------
        // BEGIN TREASURY TRIBUTE VERIFICATION
        //----------------------------------------------------------------------

        /* Set Treasury. */
        // NOTE: MUST be hard-coded for each instance of this template.
        // bytes20 TREASURY = 0x1111111111111111111111111111111111111111; // template placeholder
        bytes20 TREASURY = 0x80631EC9FE69DE771CCC67ADCE8DD81B22252590; // Ava's Treasury - nexa:nqtsq5g5sp33aj07d808w8xvv7kuarwcrv3z2fvskw2ej7dj
        // bytes20 TREASURY = 0x6d2235e60b3c2f1a3ce5032f94e85173411f598b; // Charlie - nexareg:nqtsq5g5d53rtest8sh35089qvhef6z3wdq37kvt047ajyz7

        /* Set locking (bytecode) length. */
        // NOTE: If required, MUST be the 2nd output of the transaction.
        int lockLen = tx.outputs[1].lockingBytecode.length;

        /* Verify Treasury (bytecode). */
        require(tx.outputs[1].lockingBytecode
            .split(lockLen - 20)[1] == TREASURY);

        /* Calculate Treasury Tribute amount. */
        // int tributeAmount = (miningReward * tribute) / BASIS_POINTS;
        int tributeAmount = 400000000; // 8.00%

        /* Verfify Treasury Tribute amount. */
        require(tx.outputs[1].tokenAmount >= tributeAmount);

        /* Verify Treasury asset. */
        require(tx.outputs[1].tokenGroupId == tokenGroupId);

        //----------------------------------------------------------------------
        // END TREASURY TRIBUTE VERIFICATION
        //----------------------------------------------------------------------

        //----------------------------------------------------------------------
        // BEGIN MINING REWARD VERIFICATION
        //----------------------------------------------------------------------

        /* Calculate current season. */
        int currentSeason = ((EPOCH / SEASON_LENGTH) + 1);

        /* Calculate Mining reward. */
        int miningReward = (INITIAL_MINING_REWARDS / currentSeason);

        /* Calculate Miner reward. */
        // int minerReward = (miningReward - tributeAmount);

        /**
         * Verify Mining (token) reward *exact* amount.
         * NOTE: Verification is NOT for a single output, but for
         *       the TOTAL output amount of the FULL transaction.
         *       (especially convenient for mining pool payouts)
         * NOTE: Treasury Tribute is validated elsewhere.
         */
        require(tx.groupAmountOut(tokenGroupId) == miningReward);

        /* Verfify Miner reward amount. */
        // require(tx.outputs[2].tokenAmount == minerReward);

        /* Verify Miner asset. */
        require(tx.outputs[2].tokenGroupId == tokenGroupId);

        //----------------------------------------------------------------------
        // END MINING REWARD VERIFICATION
        //----------------------------------------------------------------------
    }

    /**
     * Manage
     *
     * Guards against unauthorized access to the Minting authority
     * of the primary asset.
     *
     * NOTE: The Persona (or other authority) MUST be linked to the
     *       2nd input of the transaction.
     */
    function manage() {
        /* Set Administrator. */
        // NOTE: MUST be hard-coded for each instance of this template.
        // bytes20 ADMIN = 0x2222222222222222222222222222222222222222; // template placeholder
        bytes20 ADMIN = 0xBBBC1D4BD17736410896DA4E12CD686864E7038B; // Dorian Nakmoto - cacf3d958161a925c28a970d3c40deec1a3fe06796fe1b4a7b68f377cdb90000e6394ffe5cb20f6e2b9e5cfc4d6e8b4f6438aefe73b1e2d7d85e7549bd47b23b
        // bytes20 ADMIN = 0xD9236063BC604F8408A7E12050C4F67BB46BDCFE; // Alice - 845ee20d7b603506d4fc597b3e0a1a14be9a96fbcd8bb1205f8a9a034a9a00001337330000000000000000000000000000000000000000000000000088888888

        /* Set authorized sub-group id. */
        bytes authorized = tx.inputs[1].tokenSubgroupId;

        /* Verify Admin authorization. */
        require(hash160(authorized) == ADMIN);
    }
}
