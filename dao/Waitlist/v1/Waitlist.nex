pragma nexscript >= 0.2.0;

/*******************************************************************************
 * Copyright (c) 2024 Ava's DAO
 * Released under the MIT License.
 *
 * Waitlist
 *
 * Allows participants to queue up for access to some asset, either a
 * product or service. When the asset becomes available, the Provider can
 * claim the reservation amount and deliver the asset.
 *
 * NOTES
 * --------------------
 * TBD..
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * Version     : 01
 * Script Hash : 0x0000000000000000000000000000000000000000
 * Namespace   : WAITLIST01
 *
 * patron   : Party whom will receive the product(s) and/or service(s).
 * vendor   : Party whom is offering the product(s) and/or service(s).
 * priority : Used to "flag" a priority option (when available) for processing position or timing of delivery.
 * memo     : Any additional information (required by the vendor) to process the request.
 *
 * For more information, please visit the following resources:
 *   - https://nexa.rocks/cloud
 *   - https://avasdao.org
 *
 * @param patron
 * @param vendor
 * @param priority
 * @param memo
 *
 */
contract Waitlist(
    bytes20 visible patron,
    bytes20 visible vendor,
    int visible unused priority,
    bytes visible unused memo,
) {
    /**
     * Process (Order or Request)
     *
     * Vendors can manage assets held in the Waitlist contract, eg.
     *   1. Withdraw all funds.
     *   2. Refund all funds.
     *
     * NOTE: ONLY the Waitlist (owner) can perform this action.
     */
    function process(pubkey authorized, sig signature) {
        /* Set authorized sub-group id. */
        bytes authorized = tx.inputs[1].tokenSubgroupId;

        /* Verify Vendor authorization. */
        require(hash160(authorized) == vendor);

    }

    /**
     * Cancel
     *
     * Transfer a (pending) UTXO from the Waitlist contract to a receipient
     * specified by the Patron.
     *
     * @param authorized
     * @param signature
     */
    function cancel(pubkey authorized, sig signature) {
        /* Calculate authorized (public key) hash. */
        // NOTE: Must match `PUSH AsData(PUSH pubkey)` specification found at:
        //       https://spec.nexa.org/addresses/scriptTemplates/
        bytes20 authorizedHash = hash160(
            bytes(authorized.length) + authorized);

        /* Validate authorized Customer. */
        require(authorizedHash == patron);

        /* Validate transaction signature. */
        require(checkSig(signature, authorized));
    }
}
